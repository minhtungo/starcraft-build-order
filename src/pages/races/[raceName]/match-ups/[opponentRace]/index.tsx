import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";

import { api } from "@/utils/api";
import BuildCard from "@/components/BuildCard";
import Radio from "@/components/Radio";
import { useEffect, useState } from "react";
import Label from "@/components/Label";
import Input from "@/components/Input";
import Form from "@/components/Form";
import { BuildOrder } from "@prisma/client";

export const buildTypes = ["Macro", "Co-op", "Cheese", "All-in"];

const ALL_BUILD_TYPE = "all";

type BuildOrderFields = Pick<BuildOrder, "description" | "title" | "author">;

const FindBuilds: NextPage = () => {
  const [selectedBuildType, setSelectedBuildType] = useState(ALL_BUILD_TYPE);
  const [search, setSearch] = useState("");
  const { raceName, opponentRace } = useRouter().query as {
    opponentRace: string;
    raceName: string;
  };
  const builds = api.builds.getBuildsByMatchUp.useQuery({
    matchUp: `${raceName?.toLowerCase().charAt(0)}v${opponentRace
      ?.toLowerCase()
      .charAt(0)}`,
  });

  const filteredBuilds = builds.data
    ?.filter((build) =>
      selectedBuildType === ALL_BUILD_TYPE
        ? true
        : build.style.toLowerCase() === selectedBuildType.toLowerCase()
    )
    .filter((build) =>
      search.toLowerCase() !== ""
        ? ["author", "title", "description"].some((key) =>
            build[key as keyof BuildOrderFields]
              ?.toLowerCase()
              .includes(search.toLowerCase())
          )
        : true
    );

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container m-auto flex flex-col gap-4 bg-gray-800 px-12 pt-12">
        <h1 className="text-xl text-white">
          {raceName} vs {opponentRace}
        </h1>
        <div className="flex gap-8">
          <Form action="" className="w-1/4">
            <div>
              <Label
                text="Filter (by name, author, description)"
                htmlFor="search"
              />
              <Input
                id="search"
                onChange={(e) => setSearch(e.target.value)}
                value={search}
              />
            </div>
            <div>
              <label
                htmlFor="horizontal-list-radio-license"
                className="ml-2 w-full py-3 text-sm font-medium text-gray-900 dark:text-gray-300"
              >
                Build Type
              </label>
              <ul className="w-full rounded-lg border border-gray-200 bg-white text-sm font-medium text-gray-900 dark:border-gray-600 dark:bg-gray-700 dark:text-white">
                {[ALL_BUILD_TYPE, ...buildTypes].map((buildType: string) => (
                  <li
                    key={buildType}
                    className="w-full rounded-t-lg border-b border-gray-200 dark:border-gray-600"
                  >
                    <div className="flex items-center pl-3">
                      <input
                        id={`build-radio-${buildType}`}
                        type="radio"
                        value={buildType}
                        name="list-radio"
                        checked={buildType === selectedBuildType}
                        onChange={(e) => setSelectedBuildType(buildType)}
                        className="h-4 w-4 border-gray-300 bg-gray-100 text-blue-600 focus:ring-2 focus:ring-blue-500 dark:border-gray-500 dark:bg-gray-600 dark:ring-offset-gray-700 dark:focus:ring-blue-600 dark:focus:ring-offset-gray-700"
                      />
                      <label
                        htmlFor={`build-radio-${buildType}`}
                        className="ml-2 w-full py-3 text-sm font-medium text-gray-900 dark:text-gray-300"
                      >
                        {buildType}
                      </label>
                    </div>
                  </li>
                ))}
              </ul>
            </div>
          </Form>
          <div className="flex w-full flex-col gap-4">
            <h2 className="text-xl text-white">Matching Builds</h2>
            <div className="grid w-full max-w-7xl grid-cols-3 gap-4">
              {filteredBuilds?.map((build) => (
                <BuildCard key={build.id} build={build} />
              ))}
            </div>
          </div>
        </div>
      </main>
    </>
  );
};

export default FindBuilds;
