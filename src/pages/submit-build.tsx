import { type NextPage } from "next";
import Head from "next/head";

import { api } from "../utils/api";
import { useState } from "react";
import { useRouter } from "next/router";
import { buildTypes } from "./races/[raceName]/match-ups/[opponentRace]";

const SubmitBuildPage: NextPage = () => {
  const createBuildMutation = api.builds.createBuild.useMutation();

  const [buildOrder, setBuildOrder] = useState("");
  const [style, setStyle] = useState("cheese");
  const [author, setAuthor] = useState("");
  const [title, setTitle] = useState("");
  const [description, setDescription] = useState("");
  const [matchUp, setMatchUp] = useState("zvt");

  const router = useRouter();

  const handleSubmitBuildOrder = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await createBuildMutation.mutateAsync({
        matchUp,
        buildOrder,
        style,
        author,
        title,
        description,
      });
    } catch (error) {
      console.log(error);
    }
    router.push("/");
  };

  return (
    <>
      <Head>
        <title>Submit a build</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="mt-0 flex min-h-screen flex-col items-center justify-center text-white dark:bg-gray-800  dark:text-white">
        <h1 className="mb-4">Submit a build order</h1>
        <form
          className="flex w-full max-w-xl flex-col gap-4"
          onSubmit={handleSubmitBuildOrder}
        >
          <div className="grid grid-cols-2 gap-4">
            <div className="">
              <label
                className="mb-2 block text-sm font-medium text-gray-900 dark:text-white"
                htmlFor="match-up-select"
              >
                Match Up
              </label>
              <select
                className="input"
                value={matchUp}
                onChange={(e) => setMatchUp(e.target.value)}
                name=""
                id="match-up-select"
                required
              >
                <option value="zvt">ZvT</option>
                <option value="zvp">ZvP</option>
                <option value="zvz">ZvZ</option>
              </select>
            </div>
            <div className="">
              <label
                className="mb-2 block text-sm font-medium text-gray-900 dark:text-white"
                htmlFor="match-up-select"
              >
                Style
              </label>
              <select
                className="input"
                value={style}
                onChange={(e) => setStyle(e.target.value)}
                name=""
                id="match-up-select"
                required
              >
                {buildTypes.map((buildType) => (
                  <option key={buildType} value="cheese">
                    {buildType}
                  </option>
                ))}
              </select>
            </div>
          </div>
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label
                className="mb-2 block text-sm font-medium text-gray-900 dark:text-white"
                htmlFor="author"
              >
                Author
              </label>
              <input
                className="input"
                id="author"
                value={author}
                onChange={(e) => setAuthor(e.target.value)}
              />
            </div>
            <div>
              <label
                className="mb-2 block text-sm font-medium text-gray-900 dark:text-white"
                htmlFor="title"
              >
                Title
              </label>
              <input
                className="input"
                id="title"
                value={title}
                onChange={(e) => setTitle(e.target.value)}
              />
            </div>
          </div>
          <div>
            <label
              className="mb-2 block text-sm font-medium text-gray-900 dark:text-white"
              htmlFor="build"
            >
              Build Order
            </label>
            <textarea
              className="input h-[6rem]"
              id="build"
              value={buildOrder}
              onChange={(e) => setBuildOrder(e.target.value)}
            />
          </div>

          <div>
            <label
              className="mb-2 block text-sm font-medium text-gray-900 dark:text-white"
              htmlFor="description"
            >
              Description
            </label>
            <textarea
              className="input h-[6rem]"
              id="description"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
            />
          </div>
          <div></div>
          <button className="btn" type="submit">
            Submit
          </button>
        </form>
      </main>
    </>
  );
};

export default SubmitBuildPage;
