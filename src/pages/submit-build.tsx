import { type NextPage } from "next";
import Head from "next/head";

import { api } from "../utils/api";
import { useState } from "react";
import { useRouter } from "next/router";
import { buildTypes } from "./races/[raceName]/match-ups/[opponentRace]";

type TStep = {
  name: string;
  supply: number;
};

type races = "z" | "p" | "t";

type TBuildStep = {
  supply: number;
  unit: string;
  note: string;
};

const units: Record<races, TStep[]> = {
  z: [
    {
      name: "drone",
      supply: 1,
    },
    {
      name: "roach",
      supply: 1,
    },
    {
      name: "overlord",
      supply: 0,
    },
    {
      name: "queen",
      supply: 3,
    },
  ],
  p: [],
  t: [],
};

const structures: Record<races, TStep[]> = {
  z: [
    {
      name: "spawing pool",
      supply: -1,
    },
    {
      name: "hatchery",
      supply: -1,
    },
    {
      name: "lair",
      supply: -1,
    },
    {
      name: "spire",
      supply: -1,
    },
  ],
  p: [],
  t: [],
};

const SubmitBuildPage: NextPage = () => {
  const createBuildMutation = api.builds.createBuild.useMutation();

  const [buildOrder, setBuildOrder] = useState("");
  const [style, setStyle] = useState("cheese");
  const [author, setAuthor] = useState("");
  const [title, setTitle] = useState("");
  const [description, setDescription] = useState("");
  const [matchUp, setMatchUp] = useState("zvt");
  const [supply, setSupply] = useState(12);

  const [buildSteps, setBuildSteps] = useState<TBuildStep[]>([]);

  const router = useRouter();

  const handleSubmitBuildOrder = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await createBuildMutation.mutateAsync({
        matchUp,
        buildOrder,
        style,
        author,
        title,
        description,
      });
      router.push("/");
    } catch (error) {
      console.log(error);
    }
  };

  const addStepToBuildOrder = (stepName: TStep) => {
    setBuildSteps([...buildSteps, { supply, unit: stepName.name, note: "" }]);
    setBuildOrder(`${buildOrder}\n${supply} ${stepName.name}`);
    setSupply(supply + stepName.supply);
  };

  const race = matchUp.split("v")[0];

  return (
    <>
      <Head>
        <title>Submit a build</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="mt-0 flex min-h-screen flex-col items-center justify-center text-white dark:bg-gray-800  dark:text-white">
        <h1 className="mb-4">Submit a build order</h1>
        <form
          className="flex w-full max-w-xl flex-col gap-4"
          onSubmit={handleSubmitBuildOrder}
        >
          <div className="grid grid-cols-2 gap-4">
            <div className="">
              <label
                className="mb-2 block text-sm font-medium text-gray-900 dark:text-white"
                htmlFor="match-up-select"
              >
                Match Up
              </label>
              <select
                className="input"
                value={matchUp}
                onChange={(e) => setMatchUp(e.target.value)}
                name=""
                id="match-up-select"
                required
              >
                <option value="zvt">ZvT</option>
                <option value="zvp">ZvP</option>
                <option value="zvz">ZvZ</option>
                <option value="pvt">PvT</option>
                <option value="pvp">PvP</option>
                <option value="pvz">PvZ</option>
                <option value="tvt">TvT</option>
                <option value="tvp">TvP</option>
                <option value="tvz">TvZ</option>
              </select>
            </div>
            <div className="">
              <label
                className="mb-2 block text-sm font-medium text-gray-900 dark:text-white"
                htmlFor="match-up-select"
              >
                Style
              </label>
              <select
                className="input"
                value={style}
                onChange={(e) => setStyle(e.target.value)}
                name=""
                id="match-up-select"
                required
              >
                {buildTypes.map((buildType) => (
                  <option key={buildType} value="cheese">
                    {buildType}
                  </option>
                ))}
              </select>
            </div>
          </div>
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label
                className="mb-2 block text-sm font-medium text-gray-900 dark:text-white"
                htmlFor="author"
              >
                Author
              </label>
              <input
                className="input"
                id="author"
                value={author}
                onChange={(e) => setAuthor(e.target.value)}
              />
            </div>
            <div>
              <label
                className="mb-2 block text-sm font-medium text-gray-900 dark:text-white"
                htmlFor="title"
              >
                Title
              </label>
              <input
                className="input"
                id="title"
                value={title}
                onChange={(e) => setTitle(e.target.value)}
              />
            </div>
          </div>
          <div>
            <label
              className="mb-2 block text-sm font-medium text-gray-900 dark:text-white"
              htmlFor="description"
            >
              Description
            </label>
            <textarea
              className="input h-[8rem]"
              id="description"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
            />
          </div>
          <div className="flex w-full gap-4">
            <div className="w-2/3">
              <label
                className="mb-2 block text-sm font-medium text-gray-900 dark:text-white"
                htmlFor="build"
              >
                Build Order
              </label>

              {/* <textarea
                className="input h-[8rem]"
                id="build"
                value={buildOrder}
                onChange={(e) => setBuildOrder(e.target.value)}
              /> */}
              <table className="w-full text-left text-sm text-gray-400">
                <thead className="bg-gray-700 p-2  text-xs uppercase text-gray-400">
                  <tr>
                    <th className="p-2">Supply</th>
                    <th className="p-2">Unit/Structure</th>
                    <th className="p-2">Note</th>
                  </tr>
                </thead>
                <tbody>
                  {buildSteps.map((buildStep, idx) => (
                    <tr
                      key={idx}
                      className="border-b border-gray-700 bg-gray-800"
                    >
                      <td className="px-6 py-3">{buildStep.supply}</td>
                      <td className="px-6 py-3">{buildStep.unit}</td>
                      <td className="px-6 py-3">
                        <input
                          className="input border-0 bg-transparent hover:bg-gray-900 focus:bg-gray-800"
                          value={buildStep.note}
                          onChange={(e) => {
                            const newBuildSteps = {
                              ...buildStep,
                              note: e.target.value,
                            };
                            setBuildSteps(
                              buildSteps.map((originalBuildStep) =>
                                buildStep === originalBuildStep
                                  ? newBuildSteps
                                  : originalBuildStep
                              )
                            );
                          }}
                        />
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>

            <div className="flex gap-4">
              <div className="flex flex-col gap-4">
                <h2 className="text-lg">Units</h2>
                {units[race as races]?.map((unit: TStep) => (
                  <button
                    key={unit.name}
                    type="button"
                    onClick={() => addStepToBuildOrder(unit)}
                    className=""
                  >
                    {unit.name}
                  </button>
                ))}
              </div>
              <div className="flex flex-col gap-4">
                <h2 className="text-lg">Units</h2>
                {structures[race as races]?.map((structure: TStep) => (
                  <button
                    key={structure.name}
                    type="button"
                    onClick={() => addStepToBuildOrder(structure)}
                    className=""
                  >
                    {structure.name}
                  </button>
                ))}
              </div>
            </div>
          </div>

          <button className="btn" type="submit">
            Submit
          </button>
        </form>
      </main>
    </>
  );
};

export default SubmitBuildPage;
